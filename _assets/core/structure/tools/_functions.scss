@function calc-percent($target, $context){

	@return $target / $context * 100%;

}

@function calc-em($target, $context: $base-font-size){

	@return $target / $context * 1em;

}

@function calc-fraction($width, $fraction, $amount){

	@return $width / $fraction * $amount;

}

@function calc-grid($cols, $width, $colTotal) {
 
	$colWidth: ( $width / $colTotal ) * $cols;

  	@return ( ( $colWidth / $width ) * 100 ) + '%';

}

@function to-number($string){

	$strings: ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
	$numbers: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);

	$number: 0;

	@for $i from 1 through map-count($strings){

		@if nth($strings, $i) == $string {

			@return $i;

		}

	}

}

@function spacing-multiply( $amount: 1){

	@if $amount == '1'{

		@return $base-spacing-unit;

	}@else{

		@return $base-spacing-unit * to-number($amount);

	}

}

@function spacing-divide( $amount: 1){

	@if $amount == '1'{

		@return $base-spacing-unit;

	}@else{

		@return $base-spacing-unit / to-number($amount);

	}

}

@function calc-spacing($unit: '1x'){

	$calculated-unit: '';
	$operator: str-slice($unit, 2, 2);

	@if $operator == 'x'{

		$amount: str-slice($unit, 1, 1);
		$calculated-unit: calc-em(spacing-multiply($amount), $base-font-size);

	}@else if $operator =='/'{

		$amount: str-slice($unit, -1, -1);
		$calculated-unit: calc-em(spacing-divide($amount), $base-font-size);

	}@else{

		$calculated-unit: 0;

	}

	@return $calculated-unit;

}

@function spacing-namespace( $namespace: false, $property: 'padding'){

	$full-namespace: '';

	@if not $namespace{

		$full-namespace: str-slice($property, 1, 3);

	}@else{

		$full-namespace: #{$namespace}-#{str-slice($property, 1, 3)};

	}

	@return $full-namespace;

}

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}
